{
	"problems": [
		{
			"id": "sumArray",
			"title": "Sum Array",
			"lines": [
				"class Solution {\n\t// return the sum of all integers in 'nums'\n\tsumArray(nums) {\n\t\tvar sum = 0;\n\t\tfor (var i = 0; i < nums.length; i++) {",
				"\t\t\tsum = nums[i];",
				"\t\t}\n\t\treturn sum;\n\t}\n}"
			],
			"editable": [
				1
			]
		},
		{
			"id": "findRange",
			"title": "Find Range",
			"lines": [
				"class Solution {\n\t// return the difference between the\n\t// max and min value in 'nums'\n\tfindRange(nums) {",
				"\t\tvar maxValue, minValue;",
				"\t\tfor (var i = 0; i < nums.length; i++) {\n\t\t\tif (nums[i] > maxValue) maxValue = nums[i];\n\t\t\tif (nums[i] < minValue) minValue = nums[i];\n\t\t}\n\t\treturn maxValue - minValue;\n\t}\n}"
			],
			"editable": [
				1
			]
		},
		{
			"id": "maxIndex",
			"title": "Max Index",
			"lines": [
				"class Solution {\n\t// return index of largest integer in 'nums'\n\t// return -1 if array is empty\n\tmaxIndex(nums) {",
				"\t\tvar maxIndex = -1;\n\t\tvar maxValue = 999999;\n\t\tfor (var i = 0; i < nums.length; i++) {",
				"\t\t\tif (nums[i] > maxValue) {\n\t\t\t\tmaxValue = nums[i];\n\t\t\t\tmaxIndex = i;\n\t\t\t}\n\t\t}\n\t\treturn maxIndex;\n\t}\n}"
			],
			"editable": [
				1
			]
		},
		{
			"id": "sumArray2",
			"title": "Sum Array II",
			"lines": [
				"class Solution {\n\t// return the sum of all integers in 'nums'\n\tsumArray(nums) {\n\t\tvar n = nums.length;",
				"\t\tvar sum = 0;",
				"\t\tfor (var i = 0; i <= n; i++) {\n\t\t\tsum += nums[i];\n\t\t}\n\t\treturn sum;\n\t}\n}"
			],
			"editable": [
				1
			]
		},
		{
			"id": "leapYear",
			"title": "Leap Year",
			"lines": [
				"class Solution {\n\t// return true if 'year' is a leap year\n\t// otherwise return false\n\tisLeapYear(year) {",
				"\t\tif (year % 4 == 0) return true;",
				"\t\tif (year % 100 == 0) return false;",
				"\t\tif (year % 400 == 0) return true;",
				"\t\treturn false;\n\t}\n}"
			],
			"editable": [
				1,
				3
			]
		},
		{
			"id": "listLength",
			"title": "List Length",
			"lines": [
				"//Singly-Linked List\nclass ListNode {\n\tconstructor(value, next) {\n\t\tthis.value = value ?? 0;\n\t\tthis.next = next ?? null;\n\t}\n}",
				"class Solution {\n\t// return length of the Linked List\n\t// 'head' is a ListNode\n\tlistLength(head) {\n\t\tvar length = 0;\n\t\tvar curr = head;\n\t\tvar next = curr;",
				"\t\twhile (curr) {\n\t\t\tlength += 1;",
				"\t\t\tcurr = next;\n\t\t}\n\t\treturn length;\n\t}\n}"
			],
			"editable": [
				2
			]
		}
	]
}
